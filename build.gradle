import java.nio.channels.Pipe.SourceChannel;

buildscript {
	repositories { mavenCentral() }
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE")
		classpath('org.ajoberstar:gradle-git:1.2.0')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: 'pmd'

sourceCompatibility = 1.8
version = '0.0.5'

sourceSets {
	main { java { srcDirs = ['src/main/java']
		} }
}

jar {
	manifest {
		attributes 'Implementation-Title': 'Voyager',
		'Implementation-Version': version,
		'Main-Class': 'com.bilch.voyager.Voyager'
	}
}

repositories { mavenCentral() }

dependencies {
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile("com.h2database:h2")
	compile group: 'org.postgresql', name: 'postgresql', version: '9.4-1201-jdbc41'
	testCompile group: 'junit', name: 'junit', version: '4.+'
	testCompile("org.springframework.boot:spring-boot-starter-test")
}

//test { systemProperties 'property': 'value' }

uploadArchives {
	repositories { flatDir { dirs 'repos' } }
}

githubPages {
	repoUri = 'https://github.com/heinerbilch/voyager'
	pages {
		from('repos') { include '**/*.zip'}
	}
}

subprojects{
	tasks.withType(Pmd).each{
		reports {
			xml.enabled false
			html.enabled true
		}
	}
 }

pmd {
		ruleSets = ["java-basic", "java-braces"]
//	ruleSets = [
//		"basic",
//		"braces",
//		"strings",
//		"design",
//		"unusedcode"
//	]
	sourceSets = [sourceSets.main]
	//	ignoreFailures = true
//	toolVersion = '4.2.5'
	println "ruleSets: " + ruleSets
	sourceSets {
		main {
			println "java.srcDirs = ${java.srcDirs}"
			println "resources.srcDirs = ${resources.srcDirs}"
			println "java.files = ${java.files.name}"
			println "allJava.files = ${allJava.files.name}"
			println "resources.files = ${resources.files.name}"
			println "allSource.files = ${allSource.files.name}"
			println "output.classesDir = ${output.classesDir}"
			println "output.resourcesDir = ${output.resourcesDir}"
			println "output.files = ${output.files}"
		}
	}


}

task wrapper(type: Wrapper) { gradleVersion = '2.10' }